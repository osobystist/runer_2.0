-- сила тяжіння, що тягне гравця вниз, у одиницях пікселів/сˆ2
local gravity = -20

-- швидкість розльоту при стрибку в одиницях пікселів/с
local jump_takeoff_speed = 990

function init(self)
	msg.post('.', 'acquire_input_focus')
	msg.post("#", "reset")
	-- зберегти стартову позицію
	self.position = go.get_position()

	-- відслідковувати вектор руху та наявність контакту з землею
	-- self.velocity = vmath.vector3(0, 0, 0)
	-- self.ground_contact = false
end

function final(self)
	msg.post('.', 'release_input_focus')
end

local function play_animation(self, anim)
	if self.anim ~= anim then
		--створюється self.anim яка дорівнює nil і порівнюється з поточною анімацією.
		local anim_props = { bland_duration = 0.15 } --anim_props - анімаційний реквізит, bland_duration - заздалегіть визначена властивість яку треба
		-- передати у функцію spine.play_anim()
		spine.play_anim('#spinemodel', anim, go.PLAYBACK_LOOP_FORWARD, anim_props)
		self.anim = anim
	end
end

local function update_animation(self)
	-- make sure the right animation is playing
	if self.ground_contact then
		play_animation(self, hash("run"))
	else
		play_animation(self, hash("hoverboard"))
	end
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)

	-- Застосуйте силу тяжіння, якщо немає контакту з землею
	if not self.ground_contact then
		self.velocity = self.velocity + gravity
	end

	-- застосувати вектор швидкості до персонажа гравця
	go.set_position(go.get_position() + self.velocity * dt)

	update_animation(self)
	
	self.correction = vmath.vector3()
	self.ground_contact = false
end

local function handle_geometry_contact(self, normal, distance)
	-- спроектувати вектор корекції на контактну нормаль
	-- (вектор корекції є вектором 0 для першої контактної точки)
	local proj = vmath.dot(self.correction, normal)
	-- розрахувати компенсацію, яку ми повинні зробити для цього контактного пункту
	local comp = (distance - proj) * normal
	-- додати його до вектора корекції
	self.correction = self.correction + comp
	-- застосувати компенсацію до персонажа гравця
	go.set_position(go.get_position() + comp)
	-- перевірити, чи достатньо звичайних точок, щоб вважати гравця, що стоїть на землі
	-- (0,7 приблизно дорівнює 45 градусам відхилення від чистого вертикального напрямку)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	--спроектуйте швидкість на нормаль
	--proj - проєкція
	proj  = vmath.dot(self.velocity, normal)
	-- якщо проекція негативна, це означає, що частина швидкості спрямована до точки контакту
	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('reset') then
		print('герой отримав ресет')
		self.velocity = vmath.vector3()
		self.correction = vmath.vector3()
		self.ground_contact = false
		self.anim = nil
		go.set('.', 'euler.z', 0)
		go.set_position(self.position)
		msg.post("#collisionobject", "enable")
		-- print(go.get_id("#collisionobject"))
	elseif message_id == hash("contact_point_response") then
		-- print("Received contact_point_response from:", sender)
		-- print("Message details:", message)
		-- check if we received a contact point message
		if message.group == hash("danger") then
			-- Die and restart
			print("Danger detected from:", sender, 'який має ід: ', message.other_id)
			print('повідомлення отримав, має відключитись коліженобджект')
			play_animation(self, hash("death"))
			-- print(go.get_id("#collisionobject"))
			msg.post("#collisionobject", "disable")
			go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_LINEAR, 0.7)
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_position().y - 200, go.EASING_INSINE, 0.5, 0.2,
			function()
				msg.post("controller#controller", "reset")
			end)
			
		elseif message.group == hash("geometry") then
			handle_geometry_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- дозволяти стрибати лише з землі
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
	end
end

local function  abort_jump(self)
	-- скоротіть стрибок, якщо ми все ще піднімаємось
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end